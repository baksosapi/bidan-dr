buildscript {
    repositories {
        jcenter()
//        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:1.2.3"
        classpath 'org.apache.commons:commons-lang3:3.3.2'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
//        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    }
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://jitpack.io' }

}

android {
    compileSdkVersion 22
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "org.smartregister.bidan"
        minSdkVersion 18
        targetSdkVersion 21
        versionCode 11
        versionName "1.3.2"
        multiDexEnabled true
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", 'opensrp_url', '""'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '1'
            buildConfigField "int", "DATABASE_VERSION", '9'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
        }

        debug {
            resValue "string", 'opensrp_url', '"http://192.168.1.253:8080/opensrp"'
            resValue "string", 'uname', 'demo1'
            resValue "string", 'pwd', 'Satu2345'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "DATABASE_VERSION", '9'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "false"
            testCoverageEnabled true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }


    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(include: ['commons-validator-1.6.jar'], dir: 'libs')
    compile('org.smartregister:opensrp-client-native-form:1.0.3-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    compile('org.smartregister:opensrp-client-core:1.1.1-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
    }

    compile('com.android.support:design:22.2.1') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'

    }

    compile('org.smartregister:opensrp-client-enketo:1.0.0-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.google.guava', module: 'guava'
    }

    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.android.support:leanback-v17:22.2.1'

//    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
//        transitive = true;
//    }

    compile 'com.jjoe64:graphview:4.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'id.zelory:compressor:1.0.4'
    compile 'com.twotoasters.SectionCursorAdapter:library:1.0.+'
    compile 'com.github.ybq:Android-SpinKit:1.1.0'
    compile 'junit:junit:4.12'

    testCompile('org.robolectric:robolectric:3.4.2') {

        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'org.apache.maven', module: 'maven-ant-tasks'
        exclude group: 'com.android.support'
    }

    testCompile("org.robolectric:shadows-multidex:3.4-rc2") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.+') {

        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }
    // PowerMock
    def powerMockVersion = '1.7.1'
    testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
    testCompile "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testCompile "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testCompile("org.powermock:powermock-classloading-xstream:$powerMockVersion") {

        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }

    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
}

//Testing and coveralls

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebug']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebug.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

//End testing and coveralls
